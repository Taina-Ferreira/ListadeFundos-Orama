{"version":3,"sources":["components/TableFunds/TableLine/index.js","components/TableFunds/GroupMacro/index.js"],"names":["P","styled","p","props","theme","colors","black","ShowStrategy","span","grey","BarRisk","div","barRisk","risk","BtnDeteils","button","BtnApply","isClosed","TableLine","n","fund","formatPercent","n2","parseFloat","toFixed","isNaN","className","specification","fund_risk_profile","score_range_order","simple_name","fund_type","fund_class","style","paddingLeft","date","split","y","m","d","formatDate","quota_date","profitabilities","month","year","data-title","m12","operability","minimum_initial_application_amount","toLocaleString","currency","retrieval_quotation_days","is_closed_to_capture","Span","GroupMacro","macro","selectFunds","isActive","mains","subgroups","filter","main","macroFunds","f","fund_macro_strategy","id","length","jsxMains","map","mk","fund_main_strategy","funds","key","backgroundColor","colSpan","marginBottom","name"],"mappings":"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","file":"static/js/4.80128965.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Block,Reply} from '../../Icons';\r\n\r\nimport {Tr,Td} from 'react-super-responsive-table'\r\n\r\n/*\r\nconst Td = styled.td`\r\n    font-size: 13px;\r\n    font-family: 'Roboto',sans-serif;\r\n    color: ${props => props.theme.colors.black};\r\n    padding: 5px;\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n    font-weight: 400;\r\n`\r\n\r\nconst Tr = styled.tr`\r\n    background-color: ${props => props.theme.colors.white};\r\n`\r\n*/\r\n\r\nconst P = styled.p`\r\n    padding: 0px;\r\n    margin-bottom: 0px;\r\n    font-size: 13px;\r\n    color: ${props => props.theme.colors.black};\r\n`\r\n\r\nconst ShowStrategy = styled.span`\r\n    color: ${props => props.theme.colors.grey};\r\n    font-size: 12px;\r\n`\r\n\r\nconst BarRisk = styled.div`\r\n  display: block;\r\n  width: 7px;\r\n  height: calc(100% + 2px);\r\n  margin-bottom: 0px;\r\n  background-color: ${props => props.theme.colors.barRisk[props.risk]};\r\n  box-sizing: border-box;\r\n  :hover{\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst BtnDeteils = styled.button`\r\n    border: 1px solid #25B7BA;\r\n    height: 38px;\r\n    width: 139px;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    font-family: \"Roboto\";\r\n    color: #25B7BA !important;\r\n    background-color: #fff !important;\r\n`\r\n\r\nconst BtnApply = styled.button`\r\n    height: 38px;\r\n    width: 139px;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    font-family: \"Roboto\";\r\n    color: #fff !important;\r\n    background-color: ${props => props.isClosed ? \"#cacaca\" : \"#25B7BA\"} !important;\r\n`\r\n\r\nconst TableLine = ({fund}) => {\r\n\r\n    const formatDate = (date) => {\r\n        if (date){\r\n            const [y,m,d] = date.split('-')\r\n            return `${d}/${m}/${y}`\r\n        }else {\r\n            return '-'\r\n        }\r\n    }\r\n\r\n    const formatPercent = (n) => {\r\n        const n2 = (parseFloat(n)*100).toFixed(2)\r\n        return isNaN (n2) ? '-': n2\r\n    }\r\n\r\n    const formatNumber = (n) => {\r\n        const newN = parseFloat(n)\r\n        return newN.toLocaleString('pt-BR',{ style: 'currency',currency: 'BRL' })\r\n    }\r\n\r\n    const applyIcon = (isClosed) => {\r\n        if (isClosed)\r\n            return (<Block/>)\r\n        return (<Reply/>)\r\n    }\r\n\r\n    return (\r\n        <Tr>\r\n            <Td className=\"show-for-large\">\r\n                <div className=\"grid-container full\">\r\n                    <div className=\"grid-x\">\r\n                        <div className=\"cell shrink\">\r\n                            <BarRisk risk={fund.specification.fund_risk_profile.score_range_order}/>\r\n                        </div>\r\n                        <div className=\"cell auto large-offset-1\">\r\n                            <P>{fund.simple_name}</P>\r\n                            <ShowStrategy>{fund.specification.fund_type} | {fund.specification.fund_class}</ShowStrategy>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Td>\r\n            <Td className=\"hide-for-large\">\r\n                <div className=\"grid-container full\">\r\n                    <div className=\"grid-x\">\r\n                        <div className=\"cell shrink\">\r\n                            <BarRisk risk={fund.specification.fund_risk_profile.score_range_order}/>\r\n                        </div>\r\n                        <div className=\"cell auto large-offset-1\" style={{paddingLeft: \"10px\"}}>\r\n                            <P>{fund.simple_name}</P>\r\n                            <ShowStrategy>{fund.specification.fund_type} | {fund.specification.fund_class}</ShowStrategy>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Td>\r\n            <Td className=\"text-right\"><P>{formatDate(fund.quota_date)}</P></Td>\r\n            <Td className=\"show-for-large text-right\"><P>{formatPercent(fund.profitabilities.month)}</P></Td>\r\n            <Td className=\"show-for-large text-right\"><P>{formatPercent(fund.profitabilities.year)}</P></Td>\r\n            <Td className=\"show-for-large text-right\" data-title=\"12 M (%):\"><P>{formatPercent(fund.profitabilities.m12)}</P></Td>\r\n            <Td className=\"hide-for-large text-right\"><P>{formatPercent(fund.profitabilities.m12)}</P></Td>\r\n            <Td className=\"text-right\"><P>{formatNumber(fund.operability.minimum_initial_application_amount)}</P></Td>\r\n            <Td className=\"text-right\"><P>D+{fund.operability.retrieval_quotation_days}</P></Td>\r\n            <Td className=\"show-for-large text-left\"><P>{applyIcon(fund.is_closed_to_capture)}</P></Td>\r\n            <Td className=\"hide-for-large\">\r\n                <div className=\"grid-x fluid\">\r\n                    <div className=\"cell auto text-center\">\r\n                        <BtnDeteils className=\"button\" >MAIS DETALHES</BtnDeteils>\r\n                    </div>\r\n                    <div className=\"cell auto text-center\">\r\n                        <BtnApply className=\"button shadow\" isClosed={fund.is_closed_to_capture}>APLICAR</BtnApply>\r\n                    </div>\r\n                </div>\r\n            </Td>\r\n        </Tr>\r\n    )\r\n}\r\n\r\nexport default TableLine","import React, { Fragment } from 'react'\r\nimport TableLine from '../TableLine'\r\nimport styled from 'styled-components'\r\nimport {Tr, Td} from 'react-super-responsive-table'\r\n\r\nconst Span = styled.span`\r\n    font-size: 13px;\r\n    font-family: 'Roboto',sans-serif;\r\n    color: ${props => props.theme.colors.black};\r\n    font-weight: 900;\r\n`\r\n\r\nconst GroupMacro = ({macro, selectFunds}) => {\r\n    \r\n    if (macro.isActive) {\r\n        const mains = macro.subgroups.filter((main) => main.isActive)\r\n        \r\n        const macroFunds = selectFunds.filter((f) => f.specification.fund_macro_strategy.id === macro.id)\r\n\r\n        if (macroFunds.length){\r\n            const jsxMains = mains.map((main,mk) => {\r\n                const fund = macroFunds.filter((f) => f.specification.fund_main_strategy.id === main.id)\r\n                const funds = fund.map((f,key) => <TableLine fund={f} key={key}/>)\r\n    \r\n                if (!fund.length){\r\n                    return (\r\n                        <Fragment/>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <Fragment key={mk}>\r\n                            <Tr style={{backgroundColor: \"#f2f2f2\"}}>\r\n                                <Td colSpan=\"8\" style={{marginBottom: \"0\",paddingLeft: \"16px\"}}><Span>{main.name}</Span></Td>\r\n                            </Tr>\r\n                            {funds}\r\n                        </Fragment>\r\n                    )\r\n                }\r\n            })\r\n\r\n            return (\r\n                <Fragment>\r\n                    <tr style={{backgroundColor: \"#eff0f2\"}}>\r\n                        <td colSpan=\"8\" style={{marginBottom: \"0\",paddingLeft: \"16px\"}}>\r\n                            <Span>{macro.name}</Span>\r\n                        </td>\r\n                    </tr>\r\n                    {jsxMains}\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n    \r\n    return <Fragment/>\r\n}\r\n\r\nexport default GroupMacro\r\n"],"sourceRoot":""}